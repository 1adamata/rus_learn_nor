
import React, { useEffect, useState } from 'react'
import lessonsNorwegian from '../data/lessons.json'
import lessonsKorean from '../data/lessons-korean.json'
import { TTSButton } from './TTSButton.jsx'

export function LessonList({ showHints, selectedUser }) {
  // Choose the appropriate lessons data based on selected user
  const lessons = selectedUser?.id === 'jaeyoon' ? lessonsKorean : lessonsNorwegian

  console.log('Using lessons data:', lessons?.length, 'lessons for user:', selectedUser?.name)
  
  const [openId, setOpenId] = useState(localStorage.getItem('openLesson') || lessons[0]?.id || 1)
  const [showTranscript, setShowTranscript] = useState(localStorage.getItem('showTranscript') === 'true')

  useEffect(() => {
    localStorage.setItem('openLesson', openId)
  }, [openId])

  useEffect(() => {
    localStorage.setItem('showTranscript', showTranscript)
  }, [showTranscript])

  // Function to generate phonetic transcription for Russian text
  const getPhoneticTranscription = (russianText) => {
    // Enhanced Russian to phonetic mapping with common pronunciation rules
    const phoneticMap = {
      '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'ye', '—ë': 'yo',
      '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
      '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
      '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
      '—ä': '', '—ã': 'y', '—å': "'", '—ç': 'e', '—é': 'yu', '—è': 'ya',
      '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'Ye', '–Å': 'Yo',
      '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
      '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
      '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch',
      '–™': '', '–´': 'Y', '–¨': "'", '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    let result = russianText.toLowerCase()
      // Handle specific combinations and rules
      .replace(/–µ–≥–æ$/g, 'ivo')  // genitive ending -–µ–≥–æ -> ivo
      .replace(/–æ–≥–æ$/g, 'ovo')  // genitive ending -–æ–≥–æ -> ovo
      .replace(/—Ç—Å/g, 'ts')     // —Ç—Å -> ts
      .replace(/–¥—Å/g, 'ts')     // –¥—Å -> ts
      .replace(/–∂–∏/g, 'zhy')    // –∂–∏ -> zhy
      .replace(/—à–∏/g, 'shy')    // —à–∏ -> shy
      .replace(/—á–∏/g, 'chy')    // —á–∏ -> chy
      .replace(/—â–∏/g, 'shchy')  // —â–∏ -> shchy
    
    // Apply character mapping
    result = result.split('').map(char => phoneticMap[char] || char).join('')
    
    // Clean up extra apostrophes and spaces
    result = result.replace(/'+/g, "'").replace(/\s+/g, ' ').trim()
    
    return result
  }

  const getTranslation = (phrase) => {
    if (!phrase) return 'Translation not available'
    
    if (selectedUser?.id === 'jaeyoon') {
      return phrase.ko || phrase.en || 'Translation not available' // Use Korean if available, fallback to English
    }
    return phrase.no || phrase.en || 'Translation not available' // Use Norwegian if available, fallback to English
  }

  // Safety check for lessons
  if (!lessons || lessons.length === 0) {
    return (
      <div className="lessons-error">
        <h2>No lessons available</h2>
        <p>There was an error loading lessons for {selectedUser?.name}. Please try switching users or refreshing the page.</p>
      </div>
    )
  }

  return (
    <div className="lessons">
      <aside className="lessons__menu" aria-label="Lessons list">
        <div className="lessons__controls">
          <button 
            className={`transcript-toggle ${showTranscript ? 'active' : ''}`}
            onClick={() => setShowTranscript(!showTranscript)}
            title="Toggle phonetic transcription"
          >
            üìù Transcript
          </button>
        </div>
        {lessons.map(les => (
          <button key={les.id} className={openId === String(les.id) ? 'active' : ''} onClick={() => setOpenId(String(les.id))}>
            {les.title}
          </button>
        ))}
      </aside>
      <section className="lessons__content">
        {lessons.map(les => (
          <article key={les.id} style={{display: openId === String(les.id) ? 'block' : 'none'}}>
            <h2>{les.title}</h2>
            <p className="hint" style={{display: showHints ? 'block' : 'none'}}>{les.hint}</p>
            <ul className="phrase-list">
              {les.phrases.map((p, i) => (
                <li key={i}>
                  <div className="ru">{p.ru}</div>
                  {showTranscript && (
                    <div className="transcript">[{getPhoneticTranscription(p.ru)}]</div>
                  )}
                  <div className="en">{getTranslation(p)}</div>
                  <div className="tools">
                    <TTSButton text={p.ru} lang="ru-RU" />
                  </div>
                </li>
              ))}
            </ul>
          </article>
        ))}
      </section>
    </div>
  )
}
